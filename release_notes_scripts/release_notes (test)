import requests
from docx import Document
from docx.shared import RGBColor
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

def get_release_by_tag(owner, repo, token, tag_name):
    release_url = f"https://api.github.com/repos/{owner}/{repo}/releases/tags/{tag_name}"
    headers = {'Authorization': f'token {token}'}

    try:
        release_response = requests.get(release_url, headers=headers)
        if release_response.status_code == 404:
            tags_url = f"https://api.github.com/repos/{owner}/{repo}/tags"
            tags_response = requests.get(tags_url, headers=headers)
            tags_response.raise_for_status()
            tags = tags_response.json()

            for tag in tags:
                if tag['name'] == tag_name:
                    print(f"Found the tag '{tag_name}' but no associated release.")
                    return {}

            print(f"Tag '{tag_name}' not found in repository '{repo}'.")
            return {}
        else:
            release_response.raise_for_status()
            release = release_response.json()

            release_notes = release.get('body', 'No release notes provided.')

            release_notes = remove_unwanted_sections(release_notes)

            prs = get_prs_for_tag(owner, repo, token, tag_name)

            return {
                'tag_name': tag_name,
                'release_notes': release_notes,
                'prs': prs
            }

    except requests.RequestException as e:
        print(f"Error: {e}")
        return {}

def remove_unwanted_sections(release_notes):
    lines = release_notes.splitlines()
    cleaned_lines = []
    skip_section = False

    for line in lines:
        if "Full Changelog" in line or "Relevant PRs" in line:
            skip_section = True
        elif skip_section and line.strip() == "":
            skip_section = False
        elif not skip_section:
            cleaned_lines.append(line)
    
    return "\n".join(cleaned_lines)

def get_prs_for_tag(owner, repo, token, tag_name):
    url = f"https://api.github.com/repos/{owner}/{repo}/pulls"
    headers = {'Authorization': f'token {token}'}
    params = {'state': 'closed'}
    
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        pulls = response.json()

        filtered_prs = []
        for pr in pulls:
            pr_number = pr['number']
            pr_url = f"https://api.github.com/repos/{owner}/{repo}/issues/{pr_number}"
            pr_response = requests.get(pr_url, headers=headers)
            pr_response.raise_for_status()
            pr_details = pr_response.json()
            labels = [label['name'] for label in pr_details['labels']]
            title = pr_details['title']
            
            if 'Fixed' in labels or 'Improved' in labels or 'Fixed' in title or 'Improved' in title:
                pr_link = f"https://github.com/{owner}/{repo}/pull/{pr_number}"
                filtered_prs.append({'title': title, 'link': pr_link})

        return filtered_prs

    except requests.RequestException as e:
        print(f"Error: {e}")
        return []

def fetch_releases_for_multiple_repos(owner, repos_and_tags, token, output_file):
    document = Document()
    
    # Setting the Heading
    heading = "Release Notes - SB 3.3.1 - rc0"
    document.add_heading(heading, level=1)

    for repo, tag_name in repos_and_tags.items():
        print(f"\nFetching release information for repository: {repo}")
        release_info = get_release_by_tag(owner, repo, token, tag_name)
        if release_info:
            document.add_paragraph(f"Repository: {repo}")
            document.add_paragraph(f"Tag: {release_info['tag_name']}")
            document.add_paragraph(f"Release notes:\n{release_info['release_notes']}\n")

            for pr in release_info['prs']:
                add_hyperlink(document, pr['link'], pr['title'])
        else:
            document.add_paragraph(f"Repository: {repo}")
            document.add_paragraph("No release found for the provided tag.\n")

    document.save(output_file)
    print(f"Document saved as {output_file}")

def add_hyperlink(doc, url, text):
    p = doc.add_paragraph()
    r = p.add_run(text)
    r.font.color.rgb = RGBColor(0, 0, 255)  # Blue color for hyperlinks
    # Create and add hyperlink
    hyperlink = OxmlElement('w:hyperlink')
    hyperlink.set(qn('r:id'), 'rId1')  # Placeholder for hyperlink relationship ID
    r._element.getparent().insert(0, hyperlink)
    hyperlink.append(r._element)

def create_hyperlink(url):
    return OxmlElement('w:hyperlink', {'r:id': 'rId1'})  # Placeholder for hyperlink relationship ID

# Example usage
if __name__ == "__main__":
    owner = "rapyuta-robotics"
    repos_and_tags = {
        "rr_sootballs": "",
        #"sootballs_ims": "",
        #"sootballs_tasks": "",
        "sootballs_wms_interface": "",
        "rr_sootballs_robot_ui": "",
        
        #"rr_io_amr": "",
        #"rr_amr_gwm": "",
        #"rr_amr_auth": "",
        #"rr_amr_ui": "",
        #"rr_orders_ui_modules": ""
    }
    token = ""  # Replace with your personal access token
    output_file = "release_notes.docx"

    fetch_releases_for_multiple_repos(owner, repos_and_tags, token, output_file)
