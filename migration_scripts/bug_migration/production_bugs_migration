import requests
import json
import base64
import sys
import csv

# Example usage
wrike_token = ""
premalink = "https://www.wrike.com/open.htm?id=1364764314"
folder_id = ""  # Initialize with an empty string

azure_pat = ""
organization = "rapyuta-robotics"
project = "sootballs"

# Define custom field IDs
custom_field_ids = {
    "product": "IEABWYFPJUADT64C",
    "phase_detected": "IEABWYFPJUADBR4I",
    "qa_testing": "IEABWYFPJUADT62T",
    "reported_by": "IEABWYFPJUAEM45P",
    "issue_importance": "IEABWYFPJUAC7E6G",
    "priority": "IEABWYFPJUACL4XS",
    "assigned_squad": "IEABWYFPJUADT637",
    "contact": "IEABWYFPJUACLKMO",
    "fixed_release":"IEABWYFPJUAEUS3C",
    "cause":"IEABWYFPJUAFJ6RZ",
    "detected_release": "IEABWYFPJUAC7ATK",
    "sub_component_release": "IEABWYFPJUAEYQOE",
}

# Default values for custom fields
default_values = {
    "product" : "",
    "phase_detected": "",
    "qa_testing": "",
    "reported_by": "",
    "issue_importance": "",
    "priority": "",
    "assigned_squad": "",
    "contact":"",
    "fixed_release":"",
    "cause":"",
    "detected_release": "",
    "sub_component_release": "",
    'assignee': "vaseekaran.sl@rapyuta-robotics.com", 
}


# Mapping from Wrike statuses to multiple Azure DevOps statuses fro Bug
bug_status_mapping = {
    "New": ["Azure"],          
    "Reported": ["REPORTED"],
    "Assigned": ["ASSIGNED"],
    "Sorted": ["SORTED"],
    "Pending" : ["Pending"],
    "Postponed" : ["Postponed"],
    "Planning" : ["Planning"],
    "In Progress": ["IN_PROGRESS","In Progress"], 
    "Merged": ["MERGED"],          
    "Blocked": ["BLOCKED"],
    "In Review": ["IN_REVIEW","In Review"],
    "Ready to Test": ["READY_TO_TEST"],
    "Completed": ["COMPLETED","Completed"],
    "Will Not Fix": ["WONT_FIX"],
    "Cannot Reproduce": ["CAN_NOT_REPRODUCE"],
    "Duplicate": ["DUPLICATE"],
    "Not a Bug": ["NOT_A_BUG"]
}

# Mapping from Wrike statuses to multiple Azure DevOps statuses fro Task
task_status_mapping = {
    "New": ["New","Azure","REPORTED"],          
    "Requirements": ["Requirements"],
    "Deferred": ["Deferred"],
    "Pending" : ["Pending"],
    "Postponed" : ["Postponed"],
    "Planning" : ["Planning"],
    "Ready": ["Ready"],
    "Blocked": ["Blocked"],
    "In Progress": ["In progress","In Progress", "IN_PROGRESS"], 
    "In Review": ["In review","In Review", "IN_REVIEW"],
    "Ready to Release": ["Ready to release", "READY_TO_TEST"],
    "Current Sprint" : ["Current sprint"],     
    "QA Testing": ["QA testing"],
    "Completed": ["Completed", "Done", "COMPLETED"],
    #"Removed": [""],
    "Cannot Reproduce": ["Cannot reproduce"],
    "Duplicate": ["Duplicate","DUPLICATE"],
    "Cancelled": ["Cancelled"],
}



# Get folder Id from Wrike:
def get_folder_id():
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'bearer {wrike_token}'}
    response = requests.get(f'{url}/folders?permalink={premalink}', headers=headers)
    
    if response.status_code == 200:
        folder_details = response.json()
        return folder_details['data'][0]['id']
    else:
        print(f'Failed to get folder id: {response.status_code}')
        return None


# Function to Fetch Folder Details from Wrike:
def fetch_folder_details():
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(f'{url}/folders/{folder_id}', headers=headers)
    
    if response.status_code == 200:
        return response.json()['data'][0]
    else:
        print(f'Failed to get folder details: {response.status_code}') 
        return None
    

# Function to Fetch Assignee Name from Wrike:
def fetch_assingee_name(user_id):
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(f'{url}/users/{user_id}', headers=headers)
    
    if response.status_code == 200:
        return response.json()['data'][0]['primaryEmail']
    else:
        print(f'Failed to get assingee name: {response.status_code}')
        return None
 

# Function to Fetch subtask details from Wrike
def fetch_subtask_details(subtask_id):
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(f'{url}/tasks/{subtask_id}', headers=headers)
    
    if response.status_code == 200:
        return response.json()['data'][0]
    else:
        print(f'Failed to get subtask details: {response.status_code}')
        return None


# Fetches the value of a custom field based on its ID and returns a default if empty
def get_custom_field_value(custom_fields, field_id, default_value=None):
    for field in custom_fields:
        if field['id'] == field_id:
            # Check if the value is empty or None
            if not field['value']:  # This checks for empty strings, None, and other falsy values
                return default_value
            return field['value']
    return default_value  # Return default if the field is not found


# Function to fetch custom status details from Wrike
def get_custom_status(status_id):
    url = f"https://www.wrike.com/api/v4/customstatuses/{status_id}"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        return response.json()['data'][0]
    else:
        print(f"Failed to get custom status details: {response.status_code}")
        return None  


# Update State to the Azure Boards
def update_azure_task_state(work_item_id, new_state):
    url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/{work_item_id}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}"
    }
    body = [
        {
            "op": "add",
            "path": "/fields/System.State",
            "value": new_state
        }
    ]
    response = requests.patch(url, headers=headers, data=json.dumps(body))
    
    if response.status_code == 200 or response.status_code == 201:
        print("Work item state updated successfully.")
        return response.json()
    else:
        print(f"Failed to update in work item State : {response.status_code}")
        response.raise_for_status()



# Fetch comments for a specific task from Wrike
def fetch_task_comments(task_id):
    url = f"https://www.wrike.com/api/v4/tasks/{task_id}/comments"
    headers = {"Authorization": f"Bearer {wrike_token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()['data']
    else:
        print(f"Failed to fetch comments for task {task_id}: {response.status_code}")
        print(response.text)
        return []


# Fetch attachments for a specific task from Wrike
def fetch_task_attachments(task_id):
    url = f"https://www.wrike.com/api/v4/tasks/{task_id}/attachments"
    headers = {"Authorization": f"Bearer {wrike_token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()['data']
    else:
        print(f"Failed to fetch attachments for task {task_id}: {response.status_code}")
        print(response.text)
        return [] 


# Fetch attachment's url for a specific task from Wrike
def fetch_attachments_url(attachment_id):
    url = f"https://www.wrike.com/api/v4/attachments/{attachment_id}/url"
    headers = {"Authorization": f"Bearer {wrike_token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()['data'][0]['url']  # Correcting to get the URL directly
    else:
        print(f"Failed to fetch attachments URL for task {attachment_id}: {response.status_code}")
        print(response.text)
        return None
    

# Fetch attachment's data for a specific task from Wrike
def fetch_attachment_data(attachment_url):
    response = requests.get(attachment_url)
    if response.status_code == 200:
        return response.content
    else:
        print(f"Failed to fetch attachment data from {attachment_url}: {response.status_code}")
        print(response.text)
        return None


# Post Commends to Azure Boards in Discussion session
def post_commends_to_azure(work_item_id, comment):
    url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workItems/{work_item_id}/comments?api-version=6.0-preview.3"
    headers = {
        'Content-Type': 'application/json',  # Updated Content-Type
        'Authorization': 'Basic ' + base64.b64encode(f":{azure_pat}".encode()).decode()
    }
    data = {"text": comment['text']}
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200 or response.status_code == 201:
        return response.json()
    else:
        print(f"Empty Command is Posted!")
        return None
    
    
# Post Attachment to the Azure Boards
def post_attachment_to_azure(task_id, attachment_id, attachment_name):
    attachment_url = fetch_attachments_url(attachment_id)
    if attachment_url:
        attachment_data = fetch_attachment_data(attachment_url)
        if attachment_data:
            url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/attachments?fileName={attachment_name}&api-version=6.0"
            headers = {
                "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}",
                "Content-Type": "application/octet-stream"
            }
            timeout = 1800
            response = requests.post(url, headers=headers, data=attachment_data, timeout=timeout)
            if response.status_code == 201:
                azure_attachment_url = response.json()['url']
                
                # Attach the uploaded file to a work item
                json_patch_document = [
                    {
                        "op": "add",
                        "path": "/relations/-",
                        "value": {
                            "rel": "AttachedFile",
                            "url": azure_attachment_url,
                            "attributes": {
                                "comment": "Migrated from Wrike"
                            }
                        }
                    }
                ]
                patch_url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/{task_id}?api-version=6.0"
                patch_headers = {
                    "Content-Type": "application/json-patch+json",
                    "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}"
                }
                patch_response = requests.patch(patch_url, headers=patch_headers, json=json_patch_document)
                if patch_response.status_code in [200, 201]:
                    print(f"Successfully posted attachment '{attachment_name}' to Azure Boards.")
                else:
                    print(f"Failed to attach file to work item '{attachment_name}' in Azure: {patch_response.status_code}")
                    print(patch_response.text)
            else:
                print(f"Failed to post attachment '{attachment_name}' to Azure: {response.status_code}")
                print(response.text)
        else:
            print(f"Failed to fetch attachment data for {attachment_id} from Wrike.")
    else:
        print(f"Failed to fetch attachment URL for attachment {attachment_id} from Wrike.")



# Function to fetch tasks from Wrike
def fetch_wrike_tasks():
    url = "https://www.wrike.com/api/v4"
    headers = {"Authorization": f"Bearer {wrike_token}"}
    response = requests.get(f'{url}/folders/{folder_id}/tasks?&fields=["authorIds","customItemTypeId","responsibleIds","description","hasAttachments","dependencyIds","superParentIds","superTaskIds","metadata","customFields","parentIds","sharedIds","recurrent","briefDescription","attachmentCount","subTaskIds"]&sortField=CreatedDate', headers=headers)
    
    if response.status_code == 200:
        return response.json()['data']
    else:
        response.raise_for_status()


# Function to create tasks in Azure Boards
def create_azure_task(task_data):
    workItemType = "bug" #task_data['work']
    url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/${workItemType}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}"
    }
    # print(task_data)
    # sys.exit()

    body = [
        {"op": "add", "path": "/fields/System.Title","value": task_data['title']},
        {"op": "add", "path": "/fields/Microsoft.VSTS.TCM.SystemInfo","value": task_data['description']},
        {"op": "add", "path": "/fields/System.AssignedTo","value": task_data['assignee']},
        {"op": "add", "path": "/fields/System.AreaPath", "value": task_data['area_path']},
        {"op": "add", "path": "/fields/System.IterationPath", "value": task_data['iteration_path']},
        {"op": "add", "path": "/fields/Custom.IssueImportance","value": task_data['issue_importance']},
        {"op": "add", "path": "/fields/Custom.WrikeCreatedDate","value": task_data['created_date']},

        {"op": "add", "path": "/fields/Custom.Product","value": task_data['product']},
        {"op": "add", "path": "/fields/Custom.PhaseDetection","value": task_data['phase_detected']},
        {"op": "add", "path": "/fields/Custom.QATesting","value": task_data['qa_testing']},
        {"op": "add", "path": "/fields/Custom.ReportedBy","value": task_data['reported_by']},  
        {"op": "add", "path": "/fields/Custom.BugPriority","value": task_data['priority']},
        {"op": "add", "path": "/fields/Custom.AssignedSquad","value": task_data['assigned_squad']},
        {"op": "add", "path": "/fields/Custom.Contact","value": task_data['contact']},
        {"op": "add", "path": "/fields/Custom.FixedRelease","value": task_data['fixed_release']},
        {"op": "add", "path": "/fields/Custom.Cause","value": task_data['cause']},
        {"op": "add", "path": "/fields/Custom.DetectedRelease","value": task_data['detected_release']},
        {"op": "add", "path": "/fields/Custom.SubComponentRelease","value": task_data['sub_component_release']},

        {"op": "add", "path": "/fields/Custom.Predecessors","value": task_data['predecessors']},
        {"op": "add", "path": "/fields/Custom.Successors","value": task_data['successors']},
    ]
    response = requests.post(url, headers=headers, data=json.dumps(body))
    
    if response.status_code == 200 or response.status_code == 201:
        return response.json()
    else:
        print(f"\nFailed to Post Parent Tasks in Azure : {response.status_code} - {task_data['title']}")



# Function to create tasks in Azure Boards
def create_azure_subtask(task_data):
    workItemType = "Task"
    url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/${workItemType}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}"
    }
    body = [
        {"op": "add", "path": "/fields/System.Title","value": task_data['title']},
        {"op": "add", "path": "/fields/System.Description","value": task_data['description']},
        {"op": "add", "path": "/fields/System.AssignedTo","value": task_data['assignee']},
        {"op": "add", "path": "/fields/System.AreaPath", "value": task_data['area_path']},
        {"op": "add", "path": "/fields/System.IterationPath", "value": task_data['iteration_path']},
    ]
    response = requests.post(url, headers=headers, data=json.dumps(body))
    
    if response.status_code == 200 or response.status_code == 201:
        return response.json()
    else:
        print(f"\nFailed to Post Sub-Tasks in Azure : {response.status_code} - {task_data['title']}")
        #



# Function to create a work item link in Azure Boards
def create_work_item_link(parent_id, child_id):
    url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/{parent_id}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{azure_pat}'.encode()).decode()}"
    }
    body = [
        {
            "op": "add",
            "path": "/relations/-",
            "value": {
                "rel": "System.LinkTypes.Hierarchy-Forward",
                "url": f"https://dev.azure.com/{organization}/{project}/_apis/wit/workItems/{child_id}",
                "attributes": {"comment": "Linking child task to parent task"}
            }
        }
    ]
    response = requests.patch(url, headers=headers, data=json.dumps(body))
    
    if response.status_code == 200 or response.status_code == 201:
        return response.json()
    else:
        if response.status_code == 400 and "WorkItemLinkAddExtraParentException" in response.text:
            print(f"Task {child_id} already has a parent.")
        else:
            print(f"Failed to Link Parent and Child Tasks in Azure : {response.status_code}")
        response.raise_for_status()


def update_migration_log(wrike_id, migrated_azure_task_id,predecessor_link_array,successor_link_array):
    csv_file_path = 'migration_log.csv'  # Define the path to your CSV file here
    
    # Open the CSV file in append mode
    with open(csv_file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        
        # Write the wrike_id and migrated_azure_task_id to the CSV file
        writer.writerow([wrike_id,migrated_azure_task_id,predecessor_link_array,successor_link_array])



def get_task_dependencies(task_id):
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(f'{url}/tasks/{task_id}/dependencies', headers=headers)
    
    if response.status_code == 200:
        dependencies = response.json()
        return dependencies['data']
    else:
        print(f"Failed to fetch dependencies: {response.status_code} - {response.text}")
        return None

def get_depend_task_details(task_id):
    url = f"https://www.wrike.com/api/v4/tasks/{task_id}"
    headers = {'Authorization': f'Bearer {wrike_token}'}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        task_details = response.json()
        return task_details['data'][0]
    else:
        print(f"Failed to fetch task details: {response.status_code} - {response.text}")
        return None

# Function to migrate tasks from Wrike to Azure Boards
def migrate_tasks():
    try:
        wrike_tasks = fetch_wrike_tasks()
        
        for task in wrike_tasks:
            pd = get_custom_field_value(task['customFields'], custom_field_ids['phase_detected'], default_values['phase_detected'])
            if pd == "Production":
                predecessor_link_array = []
                successor_link_array = []
                dependencies = get_task_dependencies(task['id'])
                for dependency in dependencies:
                    predecessor_details = get_depend_task_details(dependency['predecessorId'])
                    successor_details = get_depend_task_details(dependency['successorId'])

                    if task['id'] == predecessor_details['id']:
                        #print("No Predecessor")
                        predecessor_link = ""
                    else:
                        predecessor_link = predecessor_details['permalink']
                        predecessor_link_array.append(predecessor_link)


                    if task['id'] == successor_details['id']:
                        #print("No Successor")
                        successor_link = ""
                    else:
                        successor_link = successor_details['permalink']
                        successor_link_array.append(successor_link)


                # Prepare task data
                task_data = {
                    "title": task['title'],
                    "description": task['description'],
                    "assignee": fetch_assingee_name(task.get('responsibleIds', [default_values['assignee']])[0]),
                    "area_path": "sootballs\\bugs",
                    "iteration_path": "sootballs\\PI2",
                    "created_date": task['createdDate'],

                    "product": get_custom_field_value(task['customFields'], custom_field_ids['product'], default_values['product']),
                    "phase_detected": get_custom_field_value(task['customFields'], custom_field_ids['phase_detected'], default_values['phase_detected']),
                    "qa_testing": get_custom_field_value(task['customFields'], custom_field_ids['qa_testing'], default_values['qa_testing']),
                    "reported_by": get_custom_field_value(task['customFields'], custom_field_ids['reported_by'], default_values['reported_by']),
                    "issue_importance": get_custom_field_value(task['customFields'], custom_field_ids['issue_importance'], default_values['issue_importance']),
                    "priority": get_custom_field_value(task['customFields'], custom_field_ids['priority'], default_values['priority']),
                    "assigned_squad": get_custom_field_value(task['customFields'], custom_field_ids['assigned_squad'], default_values['assigned_squad']),
                    "contact": get_custom_field_value(task['customFields'], custom_field_ids['contact'], default_values['contact']),
                    "fixed_release": get_custom_field_value(task['customFields'], custom_field_ids['fixed_release'], default_values['fixed_release']),
                    "cause": get_custom_field_value(task['customFields'], custom_field_ids['cause'], default_values['cause']),
                    "detected_release": get_custom_field_value(task['customFields'], custom_field_ids['detected_release'], default_values['detected_release']),
                    "sub_component_release": get_custom_field_value(task['customFields'], custom_field_ids['sub_component_release'], default_values['sub_component_release']),
                    "predecessors" : "\n".join(predecessor_link_array),
                    "successors" : "\n".join(successor_link_array),
                }
                
                created_task = create_azure_task(task_data)
                print(f"\nCreated Parent task: {created_task['id']} - {created_task['fields']['System.Title']}")

                if created_task:
                    wrike_task_id = task['id']
                    azure_task_id = created_task['id']

                    #Update State
                    status_id = task['customStatusId']
                    wrike_status = get_custom_status(status_id)['name']
                    for azure_state_key, wrike_status_value in bug_status_mapping.items():
                        if wrike_status in wrike_status_value:
                            azure_state = azure_state_key
                    update_azure_task_state(azure_task_id, azure_state)

                    # Migrate comments
                    comments = fetch_task_comments(wrike_task_id)
                    for comment in comments:
                        post_commends_to_azure(azure_task_id, comment)
                    print("All Commands Migrated Sucessfully!")

                    # Migrate attachments
                    attachments = fetch_task_attachments(wrike_task_id)
                    for attachment in attachments:
                        post_attachment_to_azure(azure_task_id, attachment['id'], attachment['name'])
                    print("All Attachments Migrated Sucessfully!")

                    update_migration_log(task['id'], created_task['id'],predecessor_link_array,successor_link_array)

                # Handle subtasks
                migrate_subtasks(task, created_task['id'])

    except Exception as e:
        print(f"An error occurred in migrate_tasks function: {e}")


def migrate_subtasks(parent_task, parent_azure_id):
    for subtask_id in parent_task.get('subTaskIds', []):
        subtask_details = fetch_subtask_details(subtask_id)
        
        if subtask_details:
            subtask_title = subtask_details["title"]
            subtask_assignees = [fetch_assingee_name(user_id) for user_id in subtask_details.get('responsibleIds', [])]
            if not subtask_assignees:
                subtask_assignees = [default_values['assignee']]

            azure_subtask = create_azure_subtask({
                "title": subtask_title,
                "description": subtask_details['description'],
                "assignee": subtask_assignees[0],
                "area_path": "sootballs\\bugs",
                "iteration_path": "sootballs\\PI2",
            })
            print(f"Created subtask: `{azure_subtask['id']}` for parent task: `{parent_azure_id}`")

            if azure_subtask:
                wrike_subtask_id = subtask_details['id']
                azure_subtask_id = azure_subtask['id']

                # Update State
                sub_task_status_id = subtask_details['customStatusId']
                sub_task_wrike_status = get_custom_status(sub_task_status_id)['name']
                for azure_state_key, wrike_status_value in task_status_mapping.items():
                    if sub_task_wrike_status in wrike_status_value:
                        azure_state = azure_state_key
                update_azure_task_state(azure_subtask_id, azure_state)            

                # Migrate comments
                comments = fetch_task_comments(wrike_subtask_id)
                for comment in comments:
                    post_commends_to_azure(azure_subtask_id, comment)
                print("All Comments Migrated Successfully!")

                # Migrate attachments
                attachments = fetch_task_attachments(wrike_subtask_id)
                for attachment in attachments:
                    post_attachment_to_azure(azure_subtask_id, attachment['id'], attachment['name'])
                print("All Attachments Migrated Successfully!")

                try:
                    create_work_item_link(parent_azure_id, azure_subtask_id)
                    #update_migration_log(wrike_subtask_id, azure_subtask_id,"","")
                except requests.exceptions.HTTPError:
                    print(f"Subtask {azure_subtask_id} could not be linked to {parent_azure_id} due to existing parent link.")

                # Recursive call to migrate further nested subtasks
                migrate_subtasks(subtask_details, azure_subtask_id)



# MAIN
if __name__ == '__main__':
    try:
        folder_id = get_folder_id()  # Fetch folder ID dynamically
        print(f"Folder Id: {folder_id}")
        migrate_tasks()
    except Exception as e:
        print(f"An error occurred in main: {e}")
    finally:
        print("Execution completed.")
