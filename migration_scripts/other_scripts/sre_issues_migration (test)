import requests
import json
import base64
from requests.auth import HTTPBasicAuth

# Constants for Wrike API
WRIKE_API_URL = 'https://www.wrike.com/api/v4'
WRIKE_ACCESS_TOKEN = ""
premalink = "https://www.wrike.com/open.htm?id=1364764314"

area_path = "sootballs\sootballs-sre"
iteration_path = "sootballs\\PI3"

# Constants for Azure Boards API
AZURE_DEVOPS_ORG = 'rapyuta-robotics'
AZURE_DEVOPS_PROJECT = 'sootballs'
AZURE_DEVOPS_PAT = ''  # Personal Access Token
AZURE_DEVOPS_API_URL = f'https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/$'


default_values = {
    'author': 'missing.user@rapyuta-robotics.com',
    'assignee': 'missing.user@rapyuta-robotics.com',
    'contact': '',  # Specify default contact value if necessary
    "effort": "",
    "initiative": "",
    "priority": "",
    'focus_group': '',
    'effort_rops': '',
}
# Define the mapping of Wrike statuses to Azure states
status_mapping = {
    'New' : 'New',
    'Completed': 'Completed',
    'Cancelled': 'Cancelled',
    'Done': 'Completed',
    'WONT_FIX': 'Cancelled',
    'Pending': 'New',
    'In Progress':'In Progress',
    'In Review':'In Review',
    'Deferred':'Postponed',
    'Postponed':'Postponed',
    "Won't do": "Cancelled",
    'REPORTED': 'New',
    'Ready': 'New',
    'Released': 'QA Testing',
    '重複': 'Completed',
}


# Get folder Id from Wrike:
def get_folder_id():
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'bearer {WRIKE_ACCESS_TOKEN}'}
    response = requests.get(f'{url}/folders?permalink={premalink}', headers=headers)
    if response.status_code == 200:
        folder_details = response.json()
        #print(folder_details)
        return folder_details['data'][0]['id']
    else:
        print(f'Failed to get folder id: {response.status_code}')
        return None
    
#Function to fetch author name
def fetch_author_name(user_id):
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'}
    response = requests.get(f'{url}/users/{user_id}', headers=headers)
    
    if response.status_code == 200:
        user_data = response.json()['data'][0]
        if user_data['deleted']:
            return default_values['author']
        elif user_data.get('primaryEmail') is None or user_data['primaryEmail'] == '':
            return default_values['author']
        else:
            return user_data['primaryEmail']
    else:
        print(f"Error fetching author: {response.text}")
        return default_values['author']

# Function to Fetch Assignee Name from Wrike
def fetch_assignee_name(user_id):
    url = "https://www.wrike.com/api/v4"
    headers = {'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'}
    response = requests.get(f'{url}/users/{user_id}', headers=headers)
    
    if response.status_code == 200:
        user_data = response.json()['data'][0]
        if user_data['deleted']:
            return default_values['assignee']
        elif user_data.get('primaryEmail') is None or user_data['primaryEmail'] == '':
            return default_values['assignee']
        else:
            return user_data['primaryEmail']
    else:
        print(f"Error fetching assignee: {response.text}")
        return default_values['assignee']
    
# Fetch attachments for a specific task from Wrike
def fetch_task_attachments(task_id):
    url = f"https://www.wrike.com/api/v4/tasks/{task_id}/attachments"
    headers = {"Authorization": f"Bearer {WRIKE_ACCESS_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        attachments = response.json()['data']
        #print(f"Fetched {len(attachments)} attachments for task {task_id}.")
        return attachments
    else:
        print(f"Failed to fetch attachments for task {task_id}: {response.status_code}")
        print(response.text)
        return []

# Fetch attachment's URL for a specific attachment in Wrike
def fetch_attachments_url(attachment_id):
    url = f"https://www.wrike.com/api/v4/attachments/{attachment_id}/url"
    headers = {"Authorization": f"Bearer {WRIKE_ACCESS_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        attachment_url = response.json()['data'][0]['url']
        #print(f"Fetched URL for attachment {attachment_id}.")
        return attachment_url
    else:
        print(f"Failed to fetch attachment URL for attachment {attachment_id}: {response.status_code}")
        print(response.text)
        return None

# Fetch the actual attachment data from the provided URL
def fetch_attachment_data(attachment_url):
    response = requests.get(attachment_url)

    if response.status_code == 200:
        #print(f"Successfully fetched attachment data from {attachment_url}.")
        return response.content  # Return the binary content of the file
    else:
        print(f"Failed to fetch attachment data from {attachment_url}: {response.status_code}")
        print(response.text)
        return None


# Fetch comments for a specific task from Wrike
def fetch_wrike_comments(task_id):
    url = f'https://www.wrike.com/api/v4/tasks/{task_id}/comments'
    headers = {
        'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'
    }
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        comments = response.json().get('data', [])
        #print(f"Fetched {len(comments)} comments from Wrike for task {task_id}")
        return comments
    else:
        print(f'Error fetching comments for task {task_id}: {response.status_code} {response.text}')
        return []


# Post the attachment to Azure DevOps
def post_attachment_to_azure(work_item_id, attachment_id, attachment_name):
    #print(f"Processing attachment: {attachment_name} (ID: {attachment_id})")

    # Fetch the attachment URL
    attachment_url = fetch_attachments_url(attachment_id)

    if attachment_url:
        # Fetch the attachment data
        attachment_data = fetch_attachment_data(attachment_url)

        if attachment_data:
            # Upload the file to Azure DevOps as an attachment
            upload_url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/attachments?fileName={attachment_name}&api-version=6.0"
            headers = {
                "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}",
                "Content-Type": "application/octet-stream"
            }

            response = requests.post(upload_url, headers=headers, data=attachment_data, timeout=1800)

            if response.status_code == 201:
                azure_attachment_url = response.json()['url']
                #print(f"Attachment '{attachment_name}' uploaded successfully to Azure.")

                # Attach the uploaded file to the work item
                json_patch_document = [
                    {
                        "op": "add",
                        "path": "/relations/-",
                        "value": {
                            "rel": "AttachedFile",
                            "url": azure_attachment_url,
                            "attributes": {
                                "comment": "Migrated from Wrike"
                            }
                        }
                    }
                ]

                patch_url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/{work_item_id}?api-version=6.0"
                patch_headers = {
                    "Content-Type": "application/json-patch+json",
                    "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
                }

                patch_response = requests.patch(patch_url, headers=patch_headers, json=json_patch_document)

                if patch_response.status_code in [200, 201]:
                    print(f"Successfully attached file!")
                else:
                    print(f"Failed to attach file '{attachment_name}' to work item {work_item_id}: {patch_response.status_code}")
                    print(patch_response.text)
            else:
                print(f"Failed to upload attachment '{attachment_name}' to Azure: {response.status_code}")
                print(response.text)
        else:
            print(f"Failed to fetch attachment data for {attachment_id} from Wrike.")
    else:
        print(f"Failed to fetch attachment URL for attachment {attachment_id} from Wrike.")


# Post comments to the System.History field in Azure Boards
def post_azure_devops_comments(work_item_id, comments):
    url = f'https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/{work_item_id}?api-version=6.0'
    headers = {
        'Content-Type': 'application/json-patch+json',
        'Authorization': f'Basic {base64.b64encode(f":{AZURE_DEVOPS_PAT}".encode()).decode()}'
    }

    for comment in comments:
        #print("FTECHED_COMMENT: ",comment)
        comment_text = comment['text']
        data = [
            {
                'op': 'add',
                'path': '/fields/System.History',
                'value': comment_text
            }
        ]

        try:
            response = requests.patch(url, json=data, headers=headers)
            if response.status_code in [200, 201]:
                print(f'Comment added to work item!')
                #print('------')
            else:
                print(f'Error adding comment to work item {work_item_id}: {response.status_code} {response.text}')
        except Exception as e:
            print(f"An error occurred while posting comment to work item {work_item_id}: {e}")


# Function to get Wrike folder structure
def get_wrike_folder_structure(folder_id):
    headers = {
        'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'
    }
    # Get subfolders and projects under the specified folder
    response = requests.get(f'{WRIKE_API_URL}/folders/{folder_id}', headers=headers)
    print(response.json()['data'][0]['childIds'])
    return response.json()['data'][0]['childIds'][0]


def get_wrike_projects_structure(project_id):
    headers = {
        'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'
    }
    # Get subfolders and projects under the specified folder
    response = requests.get(f'{WRIKE_API_URL}/folders/{project_id}', headers=headers)
    #print(response.json())
    return response.json()['data'][0]['childIds']

def get_depend_task_details(task_id):
    url = f"https://www.wrike.com/api/v4/tasks/{task_id}"
    headers = {'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        task_details = response.json()
        return task_details['data'][0]
    else:
        print(f"Failed to fetch task details: {response.status_code} - {response.text}")
        return None
    
#create_AZURE_EPIC_Work_item
def create_azure_epic_work_item(wrike_folder_id,work_item_type):
    wrike_url = f"https://www.wrike.com/api/v4/folders/{wrike_folder_id}"
    headers_wrike = {
        "Authorization": f"Bearer {WRIKE_ACCESS_TOKEN}"
    }

    response_wrike = requests.get(wrike_url, headers=headers_wrike)
    if response_wrike.status_code == 200:
        folder_data = response_wrike.json()["data"][0]
        #print("folder_data: ",folder_data)
        folder_name = folder_data["title"]
        folder_description = folder_data.get("description", "No description provided.")
        print("Wrike folder retrieved successfully.")
    else:
        print("Failed to retrieve Wrike folder:", response_wrike.text)
        exit()


    # Step 2: Create Epic in Azure DevOps
    azure_url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${work_item_type}?api-version=7.0"
    headers_azure = {
        "Content-Type": "application/json-patch+json"
    }
    auth = HTTPBasicAuth("", AZURE_DEVOPS_PAT)
    epic_data = [
        {
            "op": "add",
            "path": "/fields/System.Title",
            "value": folder_name
        },
        {
            "op": "add",
            "path": "/fields/System.Description",
            "value": folder_description
        },
        # {
        #     "op": "add",
        #     "path": "/fields/System.AreaPath",
        #     "value": "YOUR_AREA_PATH"  # Replace with your desired Area Path
        # },
        # {
        #     "op": "add",
        #     "path": "/fields/System.IterationPath",
        #     "value": "YOUR_ITERATION_PATH"  # Replace with your desired Iteration Path
        # }
    ]

    response_azure = requests.post(azure_url, headers=headers_azure, json=epic_data, auth=auth)
    if response_azure.status_code == 200:
        print("workItem created successfully in Azure DevOps.")
        #print(response_azure.json())
        return response_azure.json()
    else:
        print("Failed to create Epic in Azure DevOps:", response_azure.text)

def create_work_item_link(parent_id, child_id):
    print(parent_id)
    print(child_id)
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/{parent_id}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
    }
    body = [
        {
            "op": "add",
            "path": "/relations/-",
            "value": {
                "rel": "System.LinkTypes.Hierarchy-Forward",
                "url": f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workItems/{child_id}",
                "attributes": {"comment": "Linking child task to parent task"}
            }
        }
    ]
    response = requests.patch(url, headers=headers, data=json.dumps(body))
    
    if response.status_code == 200 or response.status_code == 201:
        print("LINK CREATED")
        return response.json()
    else:
        if response.status_code == 400 and "WorkItemLinkAddExtraParentException" in response.text:
            print(f"Task {child_id} already has a parent.")
        else:
            print(f"Failed to Link Parent and Child Tasks in Azure : {response.status_code}")


# Function to check if an SRE Task or any task with the given title exists in Azure Boards
def task_exists_in_azure(task_title):
    query_url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/wiql?api-version=6.0"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
    }
    
    # Query to check if an SRE Task with the given title exists
    query_sre_task = {
        "query": f"SELECT [System.Id] FROM WorkItems WHERE [System.Title] = '{task_title}' AND [System.WorkItemType] = 'SRE Task'"
    }
    
    # Execute the query to find an SRE Task
    response = requests.post(query_url, headers=headers, json=query_sre_task)
    
    if response.status_code == 200:
        results = response.json().get('workItems', [])
        if results:
            # If an SRE Task is found, return its ID
            sre_task_id = results[0]['id']
            print(f"Found existing SRE Task with ID: {sre_task_id}")
            return sre_task_id

    # If no SRE Task found, check for any other task with the same title
    query_any_task = {
        "query": f"SELECT [System.Id] FROM WorkItems WHERE [System.Title] = '{task_title}'"
    }
    
    response = requests.post(query_url, headers=headers, json=query_any_task)
    
    if response.status_code == 200:
        results = response.json().get('workItems', [])
        if results:
            # Return the ID of the first matching work item
            task_id = results[0]['id']
            print(f"Found existing task with ID: {task_id}")
            return task_id
        else:
            print("No task with the specified title found.")
            return False
    else:
        print(f"Error checking task existence: {response.status_code}")
        return False
    
# Function to add a tag to an existing task
def add_tag_to_task(task_id, tags):
    update_url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/{task_id}?api-version=6.0"
    headers = {
        "Content-Type": "application/json-patch+json",
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
    }
    
    tags_str = ";".join(tags)
    
    # Patch operation to add a tag
    patch_data = [
        {
            "op": "add",
            "path": "/fields/System.Tags",
            "value": tags_str,
        }
    ]
    
    response = requests.patch(update_url, headers=headers, json=patch_data)
    
    if response.status_code == 200:
        print(f"Tag '{tags}' added to task ID {task_id}.")
    else:
        print(f"Error adding tag to task: {response.status_code}")


 # Function to create tasks in Azure Boards
def create_azure_task(task_data,user_story_id,tags):
    # Check if the task already exists
    existing_task_id = task_exists_in_azure(task_data['title'])
    print(existing_task_id)
    if existing_task_id!=None:
        print(f"Task '{task_data['title']}' already exists in Azure.")
        add_tag_to_task(existing_task_id,tags)
        create_work_item_link(user_story_id,existing_task_id)
        return None  # Skip creation if the task is found
    else:
        print("Else")
        workItemType = "Task"  # Custom Work Item Type
        url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${workItemType}?api-version=6.0"
        headers = {
            "Content-Type": "application/json-patch+json",
            "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
        }
            # Prepare the body with safe checks for None values
        body = [
            {"op": "add", "path": "/fields/System.Title", "value": task_data['title']},
            # {"op": "add", "path": "/fields/System.Description", "value": task_data['description']},
            {"op": "add", "path": "/fields/System.AreaPath", "value": area_path},
            {"op": "add", "path": "/fields/System.IterationPath", "value": iteration_path},
            # {"op": "add", "path": "/fields/Custom.Author", "value": task_data['author_email']},
            # {"op": "add", "path": "/fields/Custom.Custom.FocusGroupsbonboarding", "value": task_data['focus_group']},
            # {"op": "add", "path": "/fields/Custom.Custom.Effort_rops", "value": task_data['effort_rops']},
            # {"op": "add", "path": "/fields/Custom.Initiative", "value": task_data['initiative']},
            # {"op": "add", "path": "/fields/Microsoft.VSTS.Common.Priority", "value": task_data['priority']},
        ]

        # print (task_data)
        # sys.exit()

        # if task_data.get("assignee_email"):
        #     body.append({"op": "add", "path": "/fields/System.AssignedTo", "value": task_data['assignee_email']})
        #     #body.append({"op": "add", "path": "/fields/System.AssignedTo", "value": 'missing.user@rapyuta-robotics.com'})

        try:
            response = requests.post(url, headers=headers, json=body)
            if response.status_code in [200, 201]:
                azure_work_item = response.json()
                work_item_id = azure_work_item['id']
                print(f"Task created: {work_item_id}")
                create_work_item_link(user_story_id,work_item_id)
                add_tag_to_task(work_item_id,tags)

                # tag_patch = [
                #     {
                #         "op": "add",
                #         "path": "/fields/System.Tags",
                #         "value": Title_Tag,
                #     }
                # ]
                # tag_response = requests.patch(f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/{work_item_id}?api-version=6.0", headers=headers, json=tag_patch)
                # if tag_response.status_code in [200, 201]:
                #     print("Task created:", task_data['title'])
                #     print("Tags added.")
                # else:
                #     print(f"Tag addition failed: {tag_response.status_code}")
                    
                return work_item_id
            else:
                print(f"Task creation failed: {response.status_code}")
                return None
        except Exception as e:
            print(f"Error creating task: {e}")
            return None

# Main migration function
def migrate_wrike_to_azure(wrike_folder_id):
    # Get folder structure from Wrike
    sub_folder_Id = get_wrike_folder_structure(wrike_folder_id)
    #print(type(sub_folder_Id))
    #create epic work item with sub_folder_id in string format
    Azure_Epic_work_item=create_azure_epic_work_item(sub_folder_Id,'Epic')
    Epic_title_tag=Azure_Epic_work_item['fields']['System.Title']
    print("next line")
    wrike_projects_IDs=get_wrike_projects_structure(sub_folder_Id)
    for project_ID in wrike_projects_IDs:
        azure_user_story=create_azure_epic_work_item(project_ID,'User Story')
        #print('Azure User STory:',azure_user_story)
        print('.........................................')
        user_story_id = azure_user_story['id']
        Title_Tag = azure_user_story['fields']['System.Title']
        create_work_item_link(Azure_Epic_work_item['id'], user_story_id)


        tasks_response = requests.get(f'{WRIKE_API_URL}/folders/{project_ID}/tasks', headers={'Authorization': f'Bearer {WRIKE_ACCESS_TOKEN}'})
        tasks=tasks_response.json()

        for task in tasks['data']:
            # Fetch assignee email
            wrike_task_details=get_depend_task_details(task['id'])
            task=wrike_task_details
            fetch_assignee_name(task['responsibleIds'][0]) if task.get('responsibleIds') else default_values['assignee']

            # Prepare custom field values
            custom_field_values = {field['id']: field['value'] for field in task.get('customFields', [])}

            # Prepare task data
            task_data = {
                'title': task['title'],
                # 'description': task['description'],
                'author_email': fetch_author_name(task['authorIds'][0]) if task.get('authorIds') else default_values['author'],
                #'contact': custom_field_values.get(custom_field_ids['contact'], default_values['contact']),
                'assignee_email': fetch_assignee_name(task['responsibleIds'][0]) if task.get('responsibleIds') else default_values['assignee']
                # 'status': status_mapping.get(task['status'], None),
                #'initiative': custom_field_values.get(custom_field_ids['initiative'], default_values['initiative']),
                #'effort': custom_field_values.get(custom_field_ids['effort'], default_values['effort']),
                #'priority': custom_field_values.get(custom_field_ids['priority'], default_values['priority']),
                #'focus_group': custom_field_values.get(custom_field_ids['focus_group'], default_values['focus_group']),
                #'effort_rops': custom_field_values.get(custom_field_ids['effort_rops'], default_values['effort_rops']),
            }
            tags=[Epic_title_tag,Title_Tag]
            # Create the task in Azure DevOps
            azure_task_id = create_azure_task(task_data,user_story_id,tags)
            if azure_task_id:

                # Fetch and migrate attachments
                if task.get('hasAttachments'):
                    task_attachments = fetch_task_attachments(task['id'])
                    for attachment in task_attachments:
                        post_attachment_to_azure(azure_task_id, attachment['id'], attachment['name'])

                # Fetch and migrate comments
                task_comments = fetch_wrike_comments(task['id'])
                post_azure_devops_comments(azure_task_id, task_comments)
    

# Execute the migration
if __name__ == "__main__":
    wrike_folder_id = 'IEABWYFPI5IVRJU2' # type: ignore # The ID of the main folder to start from
    migrate_wrike_to_azure(wrike_folder_id)
